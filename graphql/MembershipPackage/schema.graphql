
type MembershipPackage {
    package_id: ID!
    package_name: String!
    duration_days: Int
    price: Float
    max_vehicles: Int
    description: String
    is_active: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input MembershipPackageCreateInput {
    package_name: String!
    duration_days: Int!
    price: Float!
    max_vehicles: Int!
    description: String
    is_active: Boolean
}

input MembershipPackageFilter {
  id: ID
  is_active: Boolean
  search: String @where(operator: "like")
}

input MembershipPackageUpdateInput {
    package_name: String
    duration_days: Int
    price: Float
    max_vehicles: Int
    description: String
    is_active: Boolean
}

input MembershipPackageFilter {
  id: ID
  package_name: String
  is_active: Boolean
  search: String @where(operator: "like")
}

extend type Query {
  membershipPackages(
    search: String
    is_active: Boolean
  ): [MembershipPackage!]! @all(model: "App\\Models\\MembershipPackage\\MembershipPackage")
  membershipPackage(package_id: ID! @eq): MembershipPackage @find(model: "App\\Models\\MembershipPackage\\MembershipPackage")
  activeMembershipPackeges: [MembershipPackage!]! @all(model: "App\\Models\\MembershipPackage\\MembershipPackage", scoops: ["active"])
}

extend type Mutation {
  createMembershipPackage(input: MembershipPackageCreateInput! @spread): MembershipPackage
    @create(model: "App\\Models\\MembershipPackage\\MembershipPackage")
  
  updateMembershipPackage(
    package_id: ID! @eq(key: "package_id"),
    input: MembershipPackageUpdateInput! @spread
  ): MembershipPackage @update(model: "App\\Models\\MembershipPackage\\MembershipPackage")

  deleteMembershipPackage(package_id: ID! @eq(key: "package_id")): MembershipPackage
    @delete(model: "App\\Models\\MembershipPackage\\MembershipPackage")

}

type MembershipPackagePaginator {
  data: [MembershipPackage!]!
  paginatorInfo: paginatorInfo!
}

