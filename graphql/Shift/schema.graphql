
type Shift {
    shift_id: ID!
    outlet_id: ID!
    shift_name: String!
    start_time: Time!
    end_time: Time!
    is_active: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input ShiftCreateInput {
    outlet_id: ID!
    shift_name: String!
    start_time: Time!
    end_time: Time!
    is_active: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input ShiftUpdateInput {
    outlet_id: ID
    shift_name: String
    start_time: Time
    end_time: Time
    is_active: Boolean
    created_at: DateTime
    updated_at: DateTime
}

input ShiftFilter {
  id: ID
  shift_name: String
  is_active: Boolean
  search: String @where(operator: "like")
}

extend type Query {
  shifts(
    search: String
    is_active: Boolean
  ): [Shift!]! @all(model: "App\\Models\\Shift\\Shift")
  shift(shift_id: ID! @eq): Shift @find(model: "App\\Models\\Shift\\Shift")
  activeShifts: [Shift!]! @all(model: "App\\Models\\Shift\\Shift", scoops: ["active"])
  outletShift(outlet_id: ID! @eq): [Staff!]! @all(model: "App\\Models\\Shift\\Shift")
}

extend type Mutation {
  createShift(input: ShiftCreateInput! @spread): Shift
    @create(model: "App\\Models\\Shift\\Shift")
  
  updateShift(
    shift_id: ID! @eq(key: "shift_id"),
    input: ShiftUpdateInput! @spread
  ): Shift @update(model: "App\\Models\\Shift\\Shift")

  deleteShift(shift_id: ID! @eq(key: "shift_id")): Shift
    @delete(model: "App\\Models\\Shift\\Shift")

}

type ShiftPaginator {
  data: [Shift!]!
  paginatorInfo: paginatorInfo!
}