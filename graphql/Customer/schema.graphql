type Customer {
    customer_id: ID!
    plate_number: String!
    name: String!
    phone_number: String
    vehicle_type_id: Int
    vehicle_color: String
    member_number: String
    join_date: DateTime
    member_expiry_date: DateTime
    is_member: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input CustomerCreateInput {
    plate_number: String!
    name: String!
    phone_number: String!
    vehicle_type_id: Int!
    vehicle_color: String
    member_number: String!
    join_date: DateTime!
    member_expiry_date: DateTime!
    is_member: Boolean = true
}

input CustomerUpdateInput {
    plate_number: String
    name: String
    phone_number: String
    vehicle_type_id: Int
    vehicle_color: String
    member_number: String
    join_date: DateTime
    member_expiry_date: DateTime
    is_member: Boolean
}

extend type Query {
  customers: [Customer!]! @all(model: "App\\Models\\Customer\\Customer")
  customer(customer_id: ID! @eq): Customer @find(model: "App\\Models\\Customer\\Customer")
  activeCustomers: [Customer!]! @all(model: "App\\Models\\Customer\\Customer", scoops: ["active"])
  outletShift(outlet_id: ID! @eq): [Customer!]! @all(model: "App\\Models\\Customer\\Customer")
}

extend type Mutation {
  createCustomer(input: CustomerCreateInput! @spread): Customer
    @create(model: "App\\Models\\Customer\\Customer")
  
  updateCustomer(
    customer_id: ID! @eq(key: "customer_id"),
    input: CustomerUpdateInput! @spread
  ): Customer @update(model: "App\\Models\\Customer\\Customer")

  deleteCustomer(customer_id: ID! @eq(key: "customer_id")): Customer 
    @delete(model: "App\\Models\\Customer\\Customer")
}

