
type VehicleType {
    vehicle_type_id: ID!
    type_name: String!
    code: String
    description: String
    is_active: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input VehicleTypeCreateInput {
    type_name: String!
    code: String
    description: String
    is_active: Boolean = true
}

input VehicleTypeInput {
    type_name: String
    code: String
    description: String
    is_active: Boolean
}

input VehicleTypeFilter {
  id: ID
  code: String
  is_active: Boolean
  search: String @where(operator: "like")
}

extend type Query {
  vehicleTypes(
    search: String
    is_active: Boolean
  ): [VehicleType!]! @all(model: "App\\Models\\VehicleType\\VehicleType")
  vehicleType(vehicle_type_id: ID! @eq): VehicleType @find(model: "App\\Models\\VehicleType\\VehicleType")
  activeVehicleTypes: [VehicleType!]! @all(model: "App\\Models\\VehicleType\\VehicleType", scoops: ["active"])
}

extend type Mutation {
  createVehicleType(input: VehicleTypeCreateInput! @spread): VehicleType
    @create(model: "App\\Models\\VehicleType\\VehicleType")
  
  updateVehicleType(
    vehicle_type_id: ID! @eq(key: "vehicle_type_id"),
    input: VehicleTypeUpdateInput! @spread
  ): VehicleType @update(model: "App\\Models\\VehicleType\\VehicleType")

  deleteVehicleType(vehicle_type_id: ID! @eq(key: "vehicle_type_id")): VehicleType
    @delete(model: "App\\Models\\VehicleType\\VehicleType")
  
}

type VehicleTypePaginator {
  data: [VahicleType!]!
  paginatorInfo: paginatorInfo!
}
