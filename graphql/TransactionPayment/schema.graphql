
type TransactionPayment {
    payment_id: ID!
    transaction_id: ID!
    payment_method_id: ID!
    amount: Float!
    payment_date: DateTime!
    reference_number: String
    status_id: ID!
    notes: String
    created_at: DateTime!
    updated_at: DateTime!
}

input TransactionPaymentCreateInput {
    transaction_id: ID!
    payment_method_id: ID!
    amount: Float
    payment_date: DateTime!
    reference_number: String!
    status_id: ID!
    notes: String
}

input TransactionPaymentUpdateInput {
    transaction_id: ID
    payment_method_id: ID
    amount: Float
    payment_date: DateTime
    reference_number: String
    status_id: ID
    notes: String
}

extend type Query {
  transactionPayments: [TransactionPayment!]! @all(model: "App\\Models\\TransactionPayment\\TransactionPayment")
  transactionPayment(payment_id: ID! @eq): TransactionPayment @find(model: "App\\Models\\TransactionPayment\\TransactionPayment")
  transactionTrxPayment(transaction_id: ID! @eq): [TransactionPayment!]! @all(model: "App\\Models\\TransactionPayment\\TransactionPayment")
  methodTrxPayment(payment_method_id: ID! @eq): [TransactionPayment!]! @all(model: "App\\Models\\TransactionPayment\\TransactionPayment")
  serviceTrxPayment(status_id: ID! @eq): [TransactionPayment!]! @all(model: "App\\Models\\TransactionPayment\\TransactionPayment")
}

extend type Mutation {
  createTransactionPayment(input: TransactionPaymentCreateInput! @spread): TransactionPayment
    @create(model: "App\\Models\\TransactionPayment\\TransactionPayment")
  
  updateTransactionPayment(
    payment_id: ID! @eq(key: "payment_id"),
    input: TransactionPaymentUpdateInput! @spread
  ): TransactionPayment @update(model: "App\\Models\\TransactionPayment\\TransactionPayment")

  deleteTransactionPayment(payment_id: ID! @eq(key: "payment_id")): TransactionPayment
    @delete(model: "App\\Models\\TransactionPayment\\TransactionPayment")
}

type TransactionPaymentPaginator {
    data: [TransactionPayment!]!
    paginatorInfo: PaginatorInfo!
}

